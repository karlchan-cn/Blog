DEBUG main org.hibernate.internal.SessionImpl - Opened session at timestamp: 13741362290
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Opened new Session [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[] unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])] for Hibernate transaction
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Preparing JDBC Connection of Hibernate Session [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[] unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])]
DEBUG main org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler@26bb2f6e[valid=true]] read-only
DEBUG main org.hibernate.engine.jdbc.internal.LogicalConnectionImpl - Obtaining JDBC connection
DEBUG main org.hibernate.engine.jdbc.internal.LogicalConnectionImpl - Obtained JDBC connection
DEBUG main org.hibernate.engine.transaction.spi.AbstractTransactionImpl - begin
DEBUG main org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction - initial autocommit status: true
DEBUG main org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction - disabling autocommit
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Exposing Hibernate transaction as JDBC transaction [org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler@26bb2f6e[valid=true]]
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: from cn.com.kc.blog.pojo.BlogUser user where user.userName = ?
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  |  +-[IDENT] Node: 'cn'
    |        |  |  |  |  |  \-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'kc'
    |        |  |  |  \-[IDENT] Node: 'blog'
    |        |  |  \-[IDENT] Node: 'pojo'
    |        |  \-[IDENT] Node: 'BlogUser'
    |        \-[ALIAS] Node: 'user'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[PARAM] Node: '?'

DEBUG main org.hibernate.hql.internal.ast.ErrorCounter - throwQueryException() : no errors
DEBUG main org.hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
DEBUG main org.hibernate.hql.internal.ast.tree.FromElement - FromClause{level=1} : cn.com.kc.blog.pojo.BlogUser (user) -> bloguser0_
DEBUG main org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : user -> bloguser0_.id
DEBUG main org.hibernate.hql.internal.ast.tree.DotNode - getDataType() : userName -> org.hibernate.type.StringType@7a2d09e0
DEBUG main org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : user.userName -> bloguser0_.userName
DEBUG main org.hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
DEBUG main org.hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( FromClause{level=1} USERS bloguser0_ ) ( where ( = ( bloguser0_.userName bloguser0_.id userName ) ? ) ) )
DEBUG main org.hibernate.hql.internal.ast.HqlSqlWalker - Derived SELECT clause created.
DEBUG main org.hibernate.hql.internal.ast.util.JoinProcessor - Using FROM fragment [USERS bloguser0_]
DEBUG main org.hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (USERS)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'bloguser0_.id as id5_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=USERS,tableAlias=bloguser0_,origin=null,columns={,className=cn.com.kc.blog.pojo.BlogUser}}}
    |  \-[SQL_TOKEN] SqlFragment: 'bloguser0_.address as address5_, bloguser0_.createTime as createTime5_, bloguser0_.email as email5_, bloguser0_.enabled as enabled5_, bloguser0_.password as password5_, bloguser0_.phoneNumber as phoneNum7_5_, bloguser0_.showName as showName5_, bloguser0_.userName as userName5_, bloguser0_.validateCode as validat10_5_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[bloguser0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'USERS bloguser0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=USERS,tableAlias=bloguser0_,origin=null,columns={,className=cn.com.kc.blog.pojo.BlogUser}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'bloguser0_.userName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=bloguser0_,className=cn.com.kc.blog.pojo.BlogUser,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'bloguser0_.id' {alias=user, className=cn.com.kc.blog.pojo.BlogUser, tableAlias=bloguser0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@7a2d09e0}

DEBUG main org.hibernate.hql.internal.ast.ErrorCounter - throwQueryException() : no errors
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: from cn.com.kc.blog.pojo.BlogUser user where user.userName = ?
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select bloguser0_.id as id5_, bloguser0_.address as address5_, bloguser0_.createTime as createTime5_, bloguser0_.email as email5_, bloguser0_.enabled as enabled5_, bloguser0_.password as password5_, bloguser0_.phoneNumber as phoneNum7_5_, bloguser0_.showName as showName5_, bloguser0_.userName as userName5_, bloguser0_.validateCode as validat10_5_ from USERS bloguser0_ where bloguser0_.userName=?
DEBUG main org.hibernate.hql.internal.ast.ErrorCounter - throwQueryException() : no errors
DEBUG main org.hibernate.SQL - select bloguser0_.id as id5_, bloguser0_.address as address5_, bloguser0_.createTime as createTime5_, bloguser0_.email as email5_, bloguser0_.enabled as enabled5_, bloguser0_.password as password5_, bloguser0_.phoneNumber as phoneNum7_5_, bloguser0_.showName as showName5_, bloguser0_.userName as userName5_, bloguser0_.validateCode as validat10_5_ from USERS bloguser0_ where bloguser0_.userName=?
DEBUG main org.hibernate.engine.internal.StatefulPersistenceContext - Initializing non-lazy collections
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Initiating transaction commit
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Committing Hibernate transaction on Session [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[] unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])]
DEBUG main org.hibernate.engine.transaction.spi.AbstractTransactionImpl - committing
DEBUG main org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction - committed JDBC Connection
DEBUG main org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction - re-enabling autocommit
DEBUG main org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler@26bb2f6e[valid=true]]
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Closing Hibernate Session [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[] unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])] after transaction
DEBUG main org.hibernate.engine.jdbc.internal.LogicalConnectionImpl - Releasing JDBC connection
DEBUG main org.hibernate.engine.jdbc.internal.LogicalConnectionImpl - Released JDBC connection
DEBUG main org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler - HHH000163: Logical connection releasing its physical connection
DEBUG main org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler - HHH000163: Logical connection releasing its physical connection
DEBUG main org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler - HHH000163: Logical connection releasing its physical connection
DEBUG main org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler - HHH000163: Logical connection releasing its physical connection
